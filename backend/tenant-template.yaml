AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Serverless SaaS Reference Architecture

Globals:
  Function:
    Timeout: 29
    Layers:
      - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
    Environment:
      Variables:
        LOG_LEVEL: DEBUG
        POWERTOOLS_METRICS_NAMESPACE: "ServerlessSaaS"

Parameters:
  StageName:
    Type: String
    Default: "prod"
    Description: "Stage Name for the api"
Resources:
  ServerlessSaaSLayers:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: serverless-saas-dependencies-pooled
      Description: Utilities for project.
      ContentUri: layers/
      CompatibleRuntimes:
        - nodejs16.x

  #Tenant Authorizer
  TenantAuthorizerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: tenant-authorizer-execution-role
      Path: "/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: tenant-authorizer-execution-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:List*
                Resource:
                  - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*

  ProductFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: pooled-product-function-execution-role
      Path: "/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

  CreateProductFunction:
    Type: AWS::Serverless::Function
    DependsOn: ProductFunctionExecutionRole
    Properties:
      CodeUri: ProductService/
      Handler: product_service.create_product
      Runtime: nodejs16.x
      Tracing: Active
      Role: !GetAtt ProductFunctionExecutionRole.Arn
      Layers:
        - !Ref ServerlessSaaSLayers
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: "ProductService"
  ApiGatewayAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/api-gateway/access-logs-serverless-saas-tenant-api-pooled
      RetentionInDays: 30
  ApiGatewayTenantApi:
    Type: AWS::Serverless::Api
    Properties:
      MethodSettings:
        - DataTraceEnabled: False
          LoggingLevel: INFO
          MetricsEnabled: True
          ResourcePath: "/*"
          HttpMethod: "*"
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayAccessLogs.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user","requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      TracingEnabled: True
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: "pooled-serverless-saas-tenant-api"
        basePath: !Join ["", ["/", !Ref StageName]]
        x-amazon-apigateway-api-key-source: "AUTHORIZER"
        schemes:
          - https
        paths:
          /product:
            post:
              produces:
                - application/json
              responses: {}
              security:
                - Authorizer: []
              x-amazon-apigateway-integration:
                uri: !Join
                  - ""
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
                    - !GetAtt CreateProductFunction.Arn
                    - /invocations
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
        components:
          securitySchemes:
            api_key:
              type: "apiKey"
              name: "x-api-key"
              in: "header"
            Authorizer:
              type: "apiKey"
              name: "Authorization"
              in: "header"
              x-amazon-apigateway-authtype: "custom"
              x-amazon-apigateway-authorizer:
                authorizerUri: !Join
                  - ""
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
                    - !ImportValue Serverless-SaaS-AuthorizerFunctionArn
                      #'Fn::Sub': "${BootstrapStackName}-AuthorizerFunctionArn"
                    - /invocations
                authorizerResultTtlInSeconds: 30
                type: "token"
      StageName: !Ref StageName

  AuthorizerLambdaApiGatewayExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !ImportValue Serverless-SaaS-AuthorizerFunctionArn
      Principal: apigateway.amazonaws.com
      SourceArn:
        !Join [
          "",
          [
            "arn:aws:execute-api:",
            !Ref "AWS::Region",
            ":",
            !Ref "AWS::AccountId",
            ":",
            !Ref ApiGatewayTenantApi,
            "/*/*",
          ],
        ]

  CreateProductLambdaApiGatewayExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CreateProductFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        !Join [
          "",
          [
            "arn:aws:execute-api:",
            { "Ref": "AWS::Region" },
            ":",
            { "Ref": "AWS::AccountId" },
            ":",
            !Ref ApiGatewayTenantApi,
            "/*/*/*",
          ],
        ]
Outputs:
  TenantApiGatewayId:
    Description: Id for Tenant API Gateway
    Value: !Ref ApiGatewayTenantApi
  TenantAPI:
    Description: "API Gateway endpoint URL for Tenant API"
    Value:
      !Join [
        "",
        [
          !Sub "https://${ApiGatewayTenantApi}.execute-api.${AWS::Region}.amazonaws.com/",
          !Ref StageName,
          "/",
        ],
      ]
